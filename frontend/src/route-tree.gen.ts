/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as SignupImport } from "./routes/signup";
import { Route as LoginImport } from "./routes/login";
import { Route as AuthRouteImport } from "./routes/_auth/route";
import { Route as IndexImport } from "./routes/index";
import { Route as AuthProjectsImport } from "./routes/_auth/projects";
import { Route as AuthProjectsIndexImport } from "./routes/_auth/projects.index";
import { Route as AuthProjectsNewImport } from "./routes/_auth/projects.new";
import { Route as AuthProjectsProjectIdImport } from "./routes/_auth/projects.$projectId";
import { Route as AuthProjectsProjectIdIndexImport } from "./routes/_auth/projects.$projectId.index";
import { Route as AuthProjectsProjectIdTasksImport } from "./routes/_auth/projects.$projectId.tasks";
import { Route as AuthProjectsProjectIdTasksIndexImport } from "./routes/_auth/projects.$projectId.tasks.index";
import { Route as AuthProjectsProjectIdTasksNewImport } from "./routes/_auth/projects.$projectId.tasks.new";
import { Route as AuthProjectsProjectIdTasksTaskIdImport } from "./routes/_auth/projects.$projectId.tasks.$taskId";

// Create/Update Routes

const SignupRoute = SignupImport.update({
  path: "/signup",
  getParentRoute: () => rootRoute,
} as any);

const LoginRoute = LoginImport.update({
  path: "/login",
  getParentRoute: () => rootRoute,
} as any);

const AuthRouteRoute = AuthRouteImport.update({
  id: "/_auth",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const AuthProjectsRoute = AuthProjectsImport.update({
  path: "/projects",
  getParentRoute: () => AuthRouteRoute,
} as any);

const AuthProjectsIndexRoute = AuthProjectsIndexImport.update({
  path: "/",
  getParentRoute: () => AuthProjectsRoute,
} as any);

const AuthProjectsNewRoute = AuthProjectsNewImport.update({
  path: "/new",
  getParentRoute: () => AuthProjectsRoute,
} as any);

const AuthProjectsProjectIdRoute = AuthProjectsProjectIdImport.update({
  path: "/$projectId",
  getParentRoute: () => AuthProjectsRoute,
} as any);

const AuthProjectsProjectIdIndexRoute = AuthProjectsProjectIdIndexImport.update(
  {
    path: "/",
    getParentRoute: () => AuthProjectsProjectIdRoute,
  } as any,
);

const AuthProjectsProjectIdTasksRoute = AuthProjectsProjectIdTasksImport.update(
  {
    path: "/tasks",
    getParentRoute: () => AuthProjectsProjectIdRoute,
  } as any,
);

const AuthProjectsProjectIdTasksIndexRoute =
  AuthProjectsProjectIdTasksIndexImport.update({
    path: "/",
    getParentRoute: () => AuthProjectsProjectIdTasksRoute,
  } as any);

const AuthProjectsProjectIdTasksNewRoute =
  AuthProjectsProjectIdTasksNewImport.update({
    path: "/new",
    getParentRoute: () => AuthProjectsProjectIdTasksRoute,
  } as any);

const AuthProjectsProjectIdTasksTaskIdRoute =
  AuthProjectsProjectIdTasksTaskIdImport.update({
    path: "/$taskId",
    getParentRoute: () => AuthProjectsProjectIdTasksRoute,
  } as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/_auth": {
      id: "/_auth";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof AuthRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/login": {
      id: "/login";
      path: "/login";
      fullPath: "/login";
      preLoaderRoute: typeof LoginImport;
      parentRoute: typeof rootRoute;
    };
    "/signup": {
      id: "/signup";
      path: "/signup";
      fullPath: "/signup";
      preLoaderRoute: typeof SignupImport;
      parentRoute: typeof rootRoute;
    };
    "/_auth/projects": {
      id: "/_auth/projects";
      path: "/projects";
      fullPath: "/projects";
      preLoaderRoute: typeof AuthProjectsImport;
      parentRoute: typeof AuthRouteImport;
    };
    "/_auth/projects/$projectId": {
      id: "/_auth/projects/$projectId";
      path: "/$projectId";
      fullPath: "/projects/$projectId";
      preLoaderRoute: typeof AuthProjectsProjectIdImport;
      parentRoute: typeof AuthProjectsImport;
    };
    "/_auth/projects/new": {
      id: "/_auth/projects/new";
      path: "/new";
      fullPath: "/projects/new";
      preLoaderRoute: typeof AuthProjectsNewImport;
      parentRoute: typeof AuthProjectsImport;
    };
    "/_auth/projects/": {
      id: "/_auth/projects/";
      path: "/";
      fullPath: "/projects/";
      preLoaderRoute: typeof AuthProjectsIndexImport;
      parentRoute: typeof AuthProjectsImport;
    };
    "/_auth/projects/$projectId/tasks": {
      id: "/_auth/projects/$projectId/tasks";
      path: "/tasks";
      fullPath: "/projects/$projectId/tasks";
      preLoaderRoute: typeof AuthProjectsProjectIdTasksImport;
      parentRoute: typeof AuthProjectsProjectIdImport;
    };
    "/_auth/projects/$projectId/": {
      id: "/_auth/projects/$projectId/";
      path: "/";
      fullPath: "/projects/$projectId/";
      preLoaderRoute: typeof AuthProjectsProjectIdIndexImport;
      parentRoute: typeof AuthProjectsProjectIdImport;
    };
    "/_auth/projects/$projectId/tasks/$taskId": {
      id: "/_auth/projects/$projectId/tasks/$taskId";
      path: "/$taskId";
      fullPath: "/projects/$projectId/tasks/$taskId";
      preLoaderRoute: typeof AuthProjectsProjectIdTasksTaskIdImport;
      parentRoute: typeof AuthProjectsProjectIdTasksImport;
    };
    "/_auth/projects/$projectId/tasks/new": {
      id: "/_auth/projects/$projectId/tasks/new";
      path: "/new";
      fullPath: "/projects/$projectId/tasks/new";
      preLoaderRoute: typeof AuthProjectsProjectIdTasksNewImport;
      parentRoute: typeof AuthProjectsProjectIdTasksImport;
    };
    "/_auth/projects/$projectId/tasks/": {
      id: "/_auth/projects/$projectId/tasks/";
      path: "/";
      fullPath: "/projects/$projectId/tasks/";
      preLoaderRoute: typeof AuthProjectsProjectIdTasksIndexImport;
      parentRoute: typeof AuthProjectsProjectIdTasksImport;
    };
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  AuthRouteRoute: AuthRouteRoute.addChildren({
    AuthProjectsRoute: AuthProjectsRoute.addChildren({
      AuthProjectsProjectIdRoute: AuthProjectsProjectIdRoute.addChildren({
        AuthProjectsProjectIdTasksRoute:
          AuthProjectsProjectIdTasksRoute.addChildren({
            AuthProjectsProjectIdTasksTaskIdRoute,
            AuthProjectsProjectIdTasksNewRoute,
            AuthProjectsProjectIdTasksIndexRoute,
          }),
        AuthProjectsProjectIdIndexRoute,
      }),
      AuthProjectsNewRoute,
      AuthProjectsIndexRoute,
    }),
  }),
  LoginRoute,
  SignupRoute,
});

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/login",
        "/signup"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth/route.tsx",
      "children": [
        "/_auth/projects"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/_auth/projects": {
      "filePath": "_auth/projects.tsx",
      "parent": "/_auth",
      "children": [
        "/_auth/projects/$projectId",
        "/_auth/projects/new",
        "/_auth/projects/"
      ]
    },
    "/_auth/projects/$projectId": {
      "filePath": "_auth/projects.$projectId.tsx",
      "parent": "/_auth/projects",
      "children": [
        "/_auth/projects/$projectId/tasks",
        "/_auth/projects/$projectId/"
      ]
    },
    "/_auth/projects/new": {
      "filePath": "_auth/projects.new.tsx",
      "parent": "/_auth/projects"
    },
    "/_auth/projects/": {
      "filePath": "_auth/projects.index.tsx",
      "parent": "/_auth/projects"
    },
    "/_auth/projects/$projectId/tasks": {
      "filePath": "_auth/projects.$projectId.tasks.tsx",
      "parent": "/_auth/projects/$projectId",
      "children": [
        "/_auth/projects/$projectId/tasks/$taskId",
        "/_auth/projects/$projectId/tasks/new",
        "/_auth/projects/$projectId/tasks/"
      ]
    },
    "/_auth/projects/$projectId/": {
      "filePath": "_auth/projects.$projectId.index.tsx",
      "parent": "/_auth/projects/$projectId"
    },
    "/_auth/projects/$projectId/tasks/$taskId": {
      "filePath": "_auth/projects.$projectId.tasks.$taskId.tsx",
      "parent": "/_auth/projects/$projectId/tasks"
    },
    "/_auth/projects/$projectId/tasks/new": {
      "filePath": "_auth/projects.$projectId.tasks.new.tsx",
      "parent": "/_auth/projects/$projectId/tasks"
    },
    "/_auth/projects/$projectId/tasks/": {
      "filePath": "_auth/projects.$projectId.tasks.index.tsx",
      "parent": "/_auth/projects/$projectId/tasks"
    }
  }
}
ROUTE_MANIFEST_END */
