/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as SignupImport } from "./routes/signup";
import { Route as LoginImport } from "./routes/login";
import { Route as AuthRouteImport } from "./routes/_auth/route";
import { Route as IndexImport } from "./routes/index";
import { Route as AuthUsernameImport } from "./routes/_auth/$username";
import { Route as AuthTasksIndexImport } from "./routes/_auth/tasks.index";
import { Route as AuthProjectsIndexImport } from "./routes/_auth/projects.index";
import { Route as AuthTasksTaskIdImport } from "./routes/_auth/tasks.$taskId";
import { Route as AuthProjectsProjectIdImport } from "./routes/_auth/projects.$projectId";

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: "/signup",
  path: "/signup",
  getParentRoute: () => rootRoute,
} as any);

const LoginRoute = LoginImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => rootRoute,
} as any);

const AuthRouteRoute = AuthRouteImport.update({
  id: "/_auth",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const AuthUsernameRoute = AuthUsernameImport.update({
  id: "/$username",
  path: "/$username",
  getParentRoute: () => AuthRouteRoute,
} as any);

const AuthTasksIndexRoute = AuthTasksIndexImport.update({
  id: "/tasks/",
  path: "/tasks/",
  getParentRoute: () => AuthRouteRoute,
} as any);

const AuthProjectsIndexRoute = AuthProjectsIndexImport.update({
  id: "/projects/",
  path: "/projects/",
  getParentRoute: () => AuthRouteRoute,
} as any);

const AuthTasksTaskIdRoute = AuthTasksTaskIdImport.update({
  id: "/tasks/$taskId",
  path: "/tasks/$taskId",
  getParentRoute: () => AuthRouteRoute,
} as any);

const AuthProjectsProjectIdRoute = AuthProjectsProjectIdImport.update({
  id: "/projects/$projectId",
  path: "/projects/$projectId",
  getParentRoute: () => AuthRouteRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/_auth": {
      id: "/_auth";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof AuthRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/login": {
      id: "/login";
      path: "/login";
      fullPath: "/login";
      preLoaderRoute: typeof LoginImport;
      parentRoute: typeof rootRoute;
    };
    "/signup": {
      id: "/signup";
      path: "/signup";
      fullPath: "/signup";
      preLoaderRoute: typeof SignupImport;
      parentRoute: typeof rootRoute;
    };
    "/_auth/$username": {
      id: "/_auth/$username";
      path: "/$username";
      fullPath: "/$username";
      preLoaderRoute: typeof AuthUsernameImport;
      parentRoute: typeof AuthRouteImport;
    };
    "/_auth/projects/$projectId": {
      id: "/_auth/projects/$projectId";
      path: "/projects/$projectId";
      fullPath: "/projects/$projectId";
      preLoaderRoute: typeof AuthProjectsProjectIdImport;
      parentRoute: typeof AuthRouteImport;
    };
    "/_auth/tasks/$taskId": {
      id: "/_auth/tasks/$taskId";
      path: "/tasks/$taskId";
      fullPath: "/tasks/$taskId";
      preLoaderRoute: typeof AuthTasksTaskIdImport;
      parentRoute: typeof AuthRouteImport;
    };
    "/_auth/projects/": {
      id: "/_auth/projects/";
      path: "/projects";
      fullPath: "/projects";
      preLoaderRoute: typeof AuthProjectsIndexImport;
      parentRoute: typeof AuthRouteImport;
    };
    "/_auth/tasks/": {
      id: "/_auth/tasks/";
      path: "/tasks";
      fullPath: "/tasks";
      preLoaderRoute: typeof AuthTasksIndexImport;
      parentRoute: typeof AuthRouteImport;
    };
  }
}

// Create and export the route tree

interface AuthRouteRouteChildren {
  AuthUsernameRoute: typeof AuthUsernameRoute;
  AuthProjectsProjectIdRoute: typeof AuthProjectsProjectIdRoute;
  AuthTasksTaskIdRoute: typeof AuthTasksTaskIdRoute;
  AuthProjectsIndexRoute: typeof AuthProjectsIndexRoute;
  AuthTasksIndexRoute: typeof AuthTasksIndexRoute;
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthUsernameRoute: AuthUsernameRoute,
  AuthProjectsProjectIdRoute: AuthProjectsProjectIdRoute,
  AuthTasksTaskIdRoute: AuthTasksTaskIdRoute,
  AuthProjectsIndexRoute: AuthProjectsIndexRoute,
  AuthTasksIndexRoute: AuthTasksIndexRoute,
};

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "": typeof AuthRouteRouteWithChildren;
  "/login": typeof LoginRoute;
  "/signup": typeof SignupRoute;
  "/$username": typeof AuthUsernameRoute;
  "/projects/$projectId": typeof AuthProjectsProjectIdRoute;
  "/tasks/$taskId": typeof AuthTasksTaskIdRoute;
  "/projects": typeof AuthProjectsIndexRoute;
  "/tasks": typeof AuthTasksIndexRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "": typeof AuthRouteRouteWithChildren;
  "/login": typeof LoginRoute;
  "/signup": typeof SignupRoute;
  "/$username": typeof AuthUsernameRoute;
  "/projects/$projectId": typeof AuthProjectsProjectIdRoute;
  "/tasks/$taskId": typeof AuthTasksTaskIdRoute;
  "/projects": typeof AuthProjectsIndexRoute;
  "/tasks": typeof AuthTasksIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/_auth": typeof AuthRouteRouteWithChildren;
  "/login": typeof LoginRoute;
  "/signup": typeof SignupRoute;
  "/_auth/$username": typeof AuthUsernameRoute;
  "/_auth/projects/$projectId": typeof AuthProjectsProjectIdRoute;
  "/_auth/tasks/$taskId": typeof AuthTasksTaskIdRoute;
  "/_auth/projects/": typeof AuthProjectsIndexRoute;
  "/_auth/tasks/": typeof AuthTasksIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | ""
    | "/login"
    | "/signup"
    | "/$username"
    | "/projects/$projectId"
    | "/tasks/$taskId"
    | "/projects"
    | "/tasks";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | ""
    | "/login"
    | "/signup"
    | "/$username"
    | "/projects/$projectId"
    | "/tasks/$taskId"
    | "/projects"
    | "/tasks";
  id:
    | "__root__"
    | "/"
    | "/_auth"
    | "/login"
    | "/signup"
    | "/_auth/$username"
    | "/_auth/projects/$projectId"
    | "/_auth/tasks/$taskId"
    | "/_auth/projects/"
    | "/_auth/tasks/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AuthRouteRoute: typeof AuthRouteRouteWithChildren;
  LoginRoute: typeof LoginRoute;
  SignupRoute: typeof SignupRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  LoginRoute: LoginRoute,
  SignupRoute: SignupRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/login",
        "/signup"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth/route.tsx",
      "children": [
        "/_auth/$username",
        "/_auth/projects/$projectId",
        "/_auth/tasks/$taskId",
        "/_auth/projects/",
        "/_auth/tasks/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/_auth/$username": {
      "filePath": "_auth/$username.tsx",
      "parent": "/_auth"
    },
    "/_auth/projects/$projectId": {
      "filePath": "_auth/projects.$projectId.tsx",
      "parent": "/_auth"
    },
    "/_auth/tasks/$taskId": {
      "filePath": "_auth/tasks.$taskId.tsx",
      "parent": "/_auth"
    },
    "/_auth/projects/": {
      "filePath": "_auth/projects.index.tsx",
      "parent": "/_auth"
    },
    "/_auth/tasks/": {
      "filePath": "_auth/tasks.index.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
