/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as SignupImport } from "./routes/signup";
import { Route as ProjectsImport } from "./routes/projects";
import { Route as LoginImport } from "./routes/login";
import { Route as IndexImport } from "./routes/index";
import { Route as ProjectsIndexImport } from "./routes/projects.index";
import { Route as ProjectsNewImport } from "./routes/projects.new";
import { Route as ProjectsProjectIdImport } from "./routes/projects.$projectId";
import { Route as ProjectsProjectIdIndexImport } from "./routes/projects.$projectId.index";
import { Route as ProjectsProjectIdTasksImport } from "./routes/projects.$projectId.tasks";
import { Route as ProjectsProjectIdTasksIndexImport } from "./routes/projects.$projectId.tasks.index";
import { Route as ProjectsProjectIdTasksNewImport } from "./routes/projects.$projectId.tasks.new";

// Create/Update Routes

const SignupRoute = SignupImport.update({
  path: "/signup",
  getParentRoute: () => rootRoute,
} as any);

const ProjectsRoute = ProjectsImport.update({
  path: "/projects",
  getParentRoute: () => rootRoute,
} as any);

const LoginRoute = LoginImport.update({
  path: "/login",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const ProjectsIndexRoute = ProjectsIndexImport.update({
  path: "/",
  getParentRoute: () => ProjectsRoute,
} as any);

const ProjectsNewRoute = ProjectsNewImport.update({
  path: "/new",
  getParentRoute: () => ProjectsRoute,
} as any);

const ProjectsProjectIdRoute = ProjectsProjectIdImport.update({
  path: "/$projectId",
  getParentRoute: () => ProjectsRoute,
} as any);

const ProjectsProjectIdIndexRoute = ProjectsProjectIdIndexImport.update({
  path: "/",
  getParentRoute: () => ProjectsProjectIdRoute,
} as any);

const ProjectsProjectIdTasksRoute = ProjectsProjectIdTasksImport.update({
  path: "/tasks",
  getParentRoute: () => ProjectsProjectIdRoute,
} as any);

const ProjectsProjectIdTasksIndexRoute =
  ProjectsProjectIdTasksIndexImport.update({
    path: "/",
    getParentRoute: () => ProjectsProjectIdTasksRoute,
  } as any);

const ProjectsProjectIdTasksNewRoute = ProjectsProjectIdTasksNewImport.update({
  path: "/new",
  getParentRoute: () => ProjectsProjectIdTasksRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/login": {
      id: "/login";
      path: "/login";
      fullPath: "/login";
      preLoaderRoute: typeof LoginImport;
      parentRoute: typeof rootRoute;
    };
    "/projects": {
      id: "/projects";
      path: "/projects";
      fullPath: "/projects";
      preLoaderRoute: typeof ProjectsImport;
      parentRoute: typeof rootRoute;
    };
    "/signup": {
      id: "/signup";
      path: "/signup";
      fullPath: "/signup";
      preLoaderRoute: typeof SignupImport;
      parentRoute: typeof rootRoute;
    };
    "/projects/$projectId": {
      id: "/projects/$projectId";
      path: "/$projectId";
      fullPath: "/projects/$projectId";
      preLoaderRoute: typeof ProjectsProjectIdImport;
      parentRoute: typeof ProjectsImport;
    };
    "/projects/new": {
      id: "/projects/new";
      path: "/new";
      fullPath: "/projects/new";
      preLoaderRoute: typeof ProjectsNewImport;
      parentRoute: typeof ProjectsImport;
    };
    "/projects/": {
      id: "/projects/";
      path: "/";
      fullPath: "/projects/";
      preLoaderRoute: typeof ProjectsIndexImport;
      parentRoute: typeof ProjectsImport;
    };
    "/projects/$projectId/tasks": {
      id: "/projects/$projectId/tasks";
      path: "/tasks";
      fullPath: "/projects/$projectId/tasks";
      preLoaderRoute: typeof ProjectsProjectIdTasksImport;
      parentRoute: typeof ProjectsProjectIdImport;
    };
    "/projects/$projectId/": {
      id: "/projects/$projectId/";
      path: "/";
      fullPath: "/projects/$projectId/";
      preLoaderRoute: typeof ProjectsProjectIdIndexImport;
      parentRoute: typeof ProjectsProjectIdImport;
    };
    "/projects/$projectId/tasks/new": {
      id: "/projects/$projectId/tasks/new";
      path: "/new";
      fullPath: "/projects/$projectId/tasks/new";
      preLoaderRoute: typeof ProjectsProjectIdTasksNewImport;
      parentRoute: typeof ProjectsProjectIdTasksImport;
    };
    "/projects/$projectId/tasks/": {
      id: "/projects/$projectId/tasks/";
      path: "/";
      fullPath: "/projects/$projectId/tasks/";
      preLoaderRoute: typeof ProjectsProjectIdTasksIndexImport;
      parentRoute: typeof ProjectsProjectIdTasksImport;
    };
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  LoginRoute,
  ProjectsRoute: ProjectsRoute.addChildren({
    ProjectsProjectIdRoute: ProjectsProjectIdRoute.addChildren({
      ProjectsProjectIdTasksRoute: ProjectsProjectIdTasksRoute.addChildren({
        ProjectsProjectIdTasksNewRoute,
        ProjectsProjectIdTasksIndexRoute,
      }),
      ProjectsProjectIdIndexRoute,
    }),
    ProjectsNewRoute,
    ProjectsIndexRoute,
  }),
  SignupRoute,
});

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/projects",
        "/signup"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/projects": {
      "filePath": "projects.tsx",
      "children": [
        "/projects/$projectId",
        "/projects/new",
        "/projects/"
      ]
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/projects/$projectId": {
      "filePath": "projects.$projectId.tsx",
      "parent": "/projects",
      "children": [
        "/projects/$projectId/tasks",
        "/projects/$projectId/"
      ]
    },
    "/projects/new": {
      "filePath": "projects.new.tsx",
      "parent": "/projects"
    },
    "/projects/": {
      "filePath": "projects.index.tsx",
      "parent": "/projects"
    },
    "/projects/$projectId/tasks": {
      "filePath": "projects.$projectId.tasks.tsx",
      "parent": "/projects/$projectId",
      "children": [
        "/projects/$projectId/tasks/new",
        "/projects/$projectId/tasks/"
      ]
    },
    "/projects/$projectId/": {
      "filePath": "projects.$projectId.index.tsx",
      "parent": "/projects/$projectId"
    },
    "/projects/$projectId/tasks/new": {
      "filePath": "projects.$projectId.tasks.new.tsx",
      "parent": "/projects/$projectId/tasks"
    },
    "/projects/$projectId/tasks/": {
      "filePath": "projects.$projectId.tasks.index.tsx",
      "parent": "/projects/$projectId/tasks"
    }
  }
}
ROUTE_MANIFEST_END */
